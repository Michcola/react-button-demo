{"version":3,"sources":["components/button.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","active","deltaX","deltaY","myRef","React","createRef","react_default","a","createElement","ref","className","onClick","x","bind","value","onAnimationEnd","y","style","left","top","event","_this$myRef$current$g","current","getBoundingClientRect","clientX","clientY","setState","console","log","Component","App","button_Button","z","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAGqBA,2BACjB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,QAAO,EACPC,OAAO,EACPC,OAAO,GAEXV,EAAKW,MAAQC,IAAMC,YAPLb,wEAUlB,OACAc,EAAAC,EAAAC,cAAA,UAAQC,IAAKd,KAAKQ,MAAOO,UAAU,UAAUC,QAAShB,KAAKiB,EAAEC,KAAKlB,OAClEW,EAAAC,EAAAC,cAAA,QAAME,UAAU,SAASf,KAAKJ,MAAMuB,QACZ,IAAtBnB,KAAKI,MAAMC,OACZM,EAAAC,EAAAC,cAAA,QACAE,UAAU,SACVK,eAAgBpB,KAAKqB,EAAEH,KAAKlB,MAC5BsB,MAAO,CAACC,KAAKvB,KAAKI,MAAME,OAAOkB,IAAIxB,KAAKI,MAAMG,UAG9C,8BAKHkB,GAAM,IAAAC,EACQ1B,KAAKQ,MAAMmB,QAAQC,wBAAzBX,EADFS,EACET,EAAEI,EADJK,EACIL,EAEHf,EADoBmB,EAAnBI,QACkBZ,EAAG,EACtBV,EAFoBkB,EAAXK,QAEUT,EAAG,EAC3BrB,KAAK+B,SAAS,CACV1B,QAAQ,EACRC,OAAQA,EACRC,OAAQA,IAEZyB,QAAQC,IAAI,UACZjC,KAAKJ,MAAMoB,SAAWhB,KAAKJ,MAAMoB,QAAQb,KAAK,KAAK,oCAGnDH,KAAK+B,SAAS,CACV1B,QAAO,WAzCqBI,IAAMyB,YCmB3BC,mLAdb,OACExB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACfJ,EAAAC,EAAAC,cAACuB,EAAD,CAAQjB,MAAM,eAAKH,QAAShB,KAAKqC,EAAEnB,KAAKlB,QACxCW,EAAAC,EAAAC,cAACuB,EAAD,CAAQjB,MAAM,iBACdR,EAAAC,EAAAC,cAACuB,EAAD,CAAQjB,MAAM,4CAIhBF,GACAe,QAAQC,IAAI,WACZD,QAAQC,IAAIhB,UAbIR,IAAMyB,WCOJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f7f11e30.chunk.js","sourcesContent":["import React from 'react';\r\nimport './button.css'\r\n\r\nexport default class Button extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            active:false,\r\n            deltaX:0,\r\n            deltaY:0,\r\n        }\r\n        this.myRef = React.createRef()\r\n    }\r\n    render(){\r\n    return (\r\n    <button ref={this.myRef} className=\"button2\" onClick={this.x.bind(this)}>\r\n    <span className=\"value\">{this.props.value}</span>\r\n     {this.state.active === true ? (\r\n     <span \r\n     className=\"circle\" \r\n     onAnimationEnd={this.y.bind(this)}\r\n     style={{left:this.state.deltaX,top:this.state.deltaY,}}\r\n      />\r\n      ) :(\r\n     ''\r\n     )}\r\n    </button>\r\n  );\r\n}\r\nx(event){\r\n     let {x,y} =this.myRef.current.getBoundingClientRect()\r\n     let {clientX,clientY} = event\r\n     let deltaX = clientX - x -5\r\n     let deltaY = clientY - y -5\r\n    this.setState({\r\n        active: true,\r\n        deltaX: deltaX,\r\n        deltaY: deltaY,\r\n    })\r\n    console.log('limian')\r\n    this.props.onClick && this.props.onClick.call(null,'fuck')\r\n}\r\ny(){\r\n    this.setState({\r\n        active:false,\r\n    })\r\n}\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Button from './components/button'\n\n\nclass App extends React.Component {\n  render(){\n\n  return (\n    <div className=\"App\">\n    <Button value=\"按钮\" onClick={this.z.bind(this)}></Button>\n    <Button value=\"按钮\"></Button>\n    <Button value=\"按钮\"></Button>\n    </div>\n  );\n}\nz(x){\n  console.log('waimian')\n  console.log(x)\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}